#!/usr/bin/env bash

dockervol_root='/docker_volumes'
# data shared between containers:
shareddata_root="${dockervol_root}/01shared_data"

# configure container
export IMGID='02'  # range from 02 .. 99; must be unique
export IMAGENAME="r2h2/nginx${IMGID}"
export CONTAINERNAME="${IMGID}nginx"
export CONTAINERUSER="nginx${IMGID}"   # group and user to run container
export CONTAINERUID="80${IMGID}"   # gid and uid for CONTAINERUSER
export SHARED_CONTAINERS_GROUP="sharedcont"   # group optionally shared by other containers
export SHARED_CONTAINERS_GROUPID="8000"
export BUILDARGS="
    --build-arg USERNAME=$CONTAINERUSER \
    --build-arg UID=$CONTAINERUID \
"
export ENVSETTINGS=''
export NETWORKSETTINGS="
    -p 80:8080
    -p 443:8443
    --net dockernet
    --net-alias nginx.dockernet
    --ip 10.1.1.${IMGID}
"
# create network if not exists
docker network ls | grep dockernet
if (( "$?" != 0 )); then
    echo 'Creating network "dockernet"'
    docker network create --driver bridge --subnet=10.1.1.0/24
        -o com.docker.network.bridge.name=br-dockernet dockernet
fi

export VOLROOT="${dockervol_root}/$CONTAINERNAME"  # container volumes on docker host
export VOLMAPPING="
    -v $VOLROOT/etc/nginx/:/etc/nginx/:Z
    -v $VOLROOT/etc/pki/tls/:/etc/pki/tls:Z
    -v $VOLROOT/var/lib/nginx:/var/lib/nginx:Z
    -v $VOLROOT/var/log/nginx:/var/log/nginx:Z
    -v $VOLROOT/var/www:/var/www:Z
    -v $shareddata_root/testPvGvAt/md_feed:/var/www/mdfeedTestPortalverbundGvAt:ro
    -v $shareddata_root/testWpvPvAt/md_feed:/var/www/mdfeedTestWpvPortalverbundAt:ro
"


export STARTCMD='/start.sh'

# first start: create user/group/host directories
if [ $(id -u) -ne 0 ]; then
    sudo="sudo"
fi
if ! id -u $CONTAINERUSER &>/dev/null; then
    $sudo groupadd -g $CONTAINERUID $CONTAINERUSER
    $sudo groupadd -g $SHARED_CONTAINERS_GROUPID $SHARED_CONTAINERS_GROUP
    $sudo adduser --gid $CONTAINERUID -M --uid $CONTAINERUID $CONTAINERUSER  #CentOS
    #$sudo adduser --gid $CONTAINERUID --no-create-home --disabled-password --gecos "" --uid $CONTAINERUID $CONTAINERUSER #Debian
fi

# create dir with given user if not existing, relative to $HOSTVOLROOT; set/repair ownership
function chk_own_dir() {
    dir=$1; user=$2
    $sudo mkdir -p "$VOLROOT/$dir"
    $sudo chown -R $user:$user "$VOLROOT/$dir"
}

chk_own_dir etc/nginx $CONTAINERUSER
chk_own_dir etc/pki $CONTAINERUSER
chk_own_dir var/lib $CONTAINERUSER
chk_own_dir var/log $CONTAINERUSER
chk_own_dir var/www $CONTAINERUSER

# as above, but for shared dir
function chk_shared_dir() {
    dir=$1; user=$2; group=$3
    $sudo mkdir -p "$shareddata_root/$dir"
    $sudo chown -R $user:$group "$shareddata_root/$dir"
}

chk_shared_dir 'testEduPvAt' $CONTAINERUSER $SHARED_CONTAINERS_GROUP

# fix private key permissions
$sudo chmod -R 600 $VOLROOT/etc/pki/tls/private/
$sudo chmod 700 $VOLROOT/etc/pki/tls/private
